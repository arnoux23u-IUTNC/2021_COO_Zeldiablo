@startuml

title Diagramme de Classe - Zeldiablo V5

class JeuPerso implements Jeu{
    + {static} assetsDirectory : String
    + JeuPerso()
    + evoluer(d : Direction, b : boolean)
    + evoluerMonstres()
    + etreFini() : boolean
    + dessiner(crayon : Graphics2D)
}

interface Jeu{
    + evoluer(d : Direction, b : boolean)
    + evoluerMonstres()
    + etreFini() : boolean
}

class Labyrinthe{
        + {static} TAILLE : int
        - {static} LAB : String
        + Labyrinthe(autoGenerate : boolean)
        - peutBouger(p : Personnage, d : Direction) : boolean
        + deplacerPersonnage(p : Personnage, d : Direction) : boolean
        - trouverDestination(p : Personnage, d : Direction) : Case
        - estCaseVide(c : Case) : boolean
        + getEntree() : Porte
        + getSortie() : Porte
        + getCase( x : int, y : int) : Case
        + getCases() : Case[][]
        +getlMonstre() : ArrayList<Monstre>
        +dessiner(crayon : Graphics2D)
        + supprimerLesMorts()
        + getJoueur() : Joueur
        + setJoueur(j : Joueur)
}

abstract class Personnage{
       - pv : int
       - degats : int
       + Personnage(l : Labyrinthe, depart : Case, pointsDeVie : int, degats : int)
       + getCase() : Case
       + setPosition(position : Case)
       + seDeplacer(d : Direction) : boolean
       + diminuerVie(vieDown : int)
       + augmenterVie(vieUp : int)
       +getPv() : int
       + attaquer(p : Personnage)
       + etreMort() : boolean
       +getLabyrinthe() : Labyrinthe
       + trouverCasesAutour() : ArrayList<Case>
       + {abstract}  peutTraverserChemin() : boolean
       + {abstract}  peutTraverserMur() : boolean
       + {abstract}  peutTraverserPiege() : boolean
       + {abstract}  peutTraverserPorte() : boolean
       + {abstract}  isJoueur() : boolean
       + {abstract}  isTroll() : boolean
       + {abstract} dessiner(Graphics2D crayon)
}

abstract class Monstre extends Personnage{
    + Monstre(l : Labyrinthe, depart : Case, pointsDeVie : int, degats : int)
    + seDeplacerVersJoueur()
    + attaquerLeJoueur()
}

class Troll extends Monstre{
    - texture : Image
    - tapeDansLeTour : boolean
    +Troll(l : Labyrinthe, depart :Case)
    + seRegenerer()
    +trollSeFaitAttaquer()
    +isTroll() : boolean
    +isJoueur() : boolean
    +peutTraverserMur() : boolean
    +peutTraverserPorte() : boolean
    +peutTraverserPiege() : boolean
    +peutTraverserChemin() : boolean
    +dessiner(crayon : Graphics2D)
}

class Fantome extends Monstre{
    - texture : Image
    +Fantome(l : Labyrinthe, depart :Case)
    +isTroll() : boolean
    +isJoueur() : boolean
    +peutTraverserMur() : boolean
    +peutTraverserPorte() : boolean
    +peutTraverserPiege() : boolean
    +peutTraverserChemin() : boolean
    +dessiner(crayon : Graphics2D)
}

class Joueur extends Personnage{
     - textureVide : Image
     - textureArme : Image
     - textureBouclier : Image
     - textureBouclierArme : Image
    +Joueur(l : Labyrinthe, entree : Porte)
    +attaquerAutour()
    +ajouterArme(arme : Arme)
    +getArmeEnMain() : Arme
    +ajouterBouclier(bouc : Bouclier)
    + diminuerVie(vieDown : int)
    +peutTraverserMur() : boolean
    +peutTraverserPorte() : boolean
    +peutTraverserPiege() : boolean
    +peutTraverserChemin() : boolean
    +isTroll() : boolean
    + isJoueur() : boolean
    +dessiner(crayon : Graphics2D)
}

class Bouclier{
    + texture : Image
    - resistance : int
    +Bouclier(resi : int)
    + getResistance(): int
    + diminuerResistance(degats : int) : int
    + etreCasseBouclier() : boolean
}

class Arme{
    + texture : Image
    - degats : int
    +Arme(degats : int)
    + getDegats(): int
}

abstract class Case{
    + x : int
    + y : int
    + Case(x:int, y : int)
    + {abstract} getIdentifier() : String
    + toString() : String
    + {abstract} dessiner(crayon : Graphics2D)
}


abstract class Obstacle extends Case{
    + Obstacle(x : int, y : int)
}

class Chemin extends Case{
    - texture : Image
    + {static} IDENTIFIER : char
    + Chemin(x:int, y : int)
    + getIdentifier() : String
    + dessiner(crayon : Graphics2D)
    + setArme()
    + getArme() : Arme
    + setBouclier()
    + getBouclier() : Bouclier
}

class Mur extends Obstacle{
    - texture : Image
    + {static} IDENTIFIER : char
    + Mur(x:int, y : int)
    + getIdentifier() : String
    + dessiner(crayon : Graphics2D)
}

class Piege extends Obstacle{
    - texture : Image
    + {static} IDENTIFIER : char
    + Piege(x:int, y : int)
    + getIdentifier() : String
    + dessiner(crayon : Graphics2D)
}

class Porte extends Case{
    - texture : Image
    + {static} IDENTIFIER : char
    - ferme : boolean
    + Porte( x: int, y : int)
    +setFerme(b : boolean)
    + isFerme() : boolean
    + getIdentifier() : String
    + dessiner(crayon : Graphics2D)
}

JeuPerso "1" --> "1" Joueur: " - pj "
Labyrinthe "1" -right-> "1" Joueur: " - joueur "
Labyrinthe "1" --> "*" Case: " - cases "
Labyrinthe "1" --> "1" Porte: " - entree "
Labyrinthe "1" --> "1" Porte: " - sortie "
Labyrinthe "1" -left-> "*" Monstre: " - lMonstre "
Personnage "1" --> "1" Case: " - position "
Personnage "1" --> "1" Labyrinthe: " - l "
Joueur "1" --> "1" Bouclier: " - bouclierEnMain "
Joueur "1" --> "1" Arme: " - armeEnMain "
Chemin "1" --> "1" Arme: " - arme "
Chemin "1" --> "1" Bouclier: " - bouclier "

@enduml